{"mappings":"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","sources":["src/index.ts","src/context/ChatBotProvider.tsx","src/reduxApp/store.ts","src/features/chatbot/chatbotSlice.ts","src/hooks/useChatBot.ts","src/features/chatbot/sendMessage.ts","src/hooks/usePending.ts"],"sourcesContent":["export { ChatBotProvider } from './context/ChatBotProvider';\r\nexport { default as useChatBot } from './hooks/useChatBot';\r\nexport { default as usePending } from './hooks/usePending';","import { ReactNode, useEffect } from 'react';\r\nimport { Provider, useDispatch } from 'react-redux';\r\nimport { store } from '../reduxApp/store';\r\nimport { setApiEndpoint } from '../features/chatbot/chatbotSlice';\r\n\r\ntype ProviderProps = {\r\n  children: ReactNode,\r\n  endpoint: string\r\n}\r\n\r\nconst EndpointSetter = ({ children, endpoint }: ProviderProps) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(setApiEndpoint(endpoint));\r\n  }, [endpoint, dispatch]);\r\n\r\n  return <>{children}</>;\r\n};\r\n\r\nexport function ChatBotProvider({ children, endpoint }: ProviderProps) {\r\n\r\n  return <Provider store={store}>\r\n    <EndpointSetter endpoint={endpoint}>\r\n      {children}\r\n    </EndpointSetter>\r\n</Provider>\r\n}","import { ThunkDispatch, configureStore, Action } from '@reduxjs/toolkit';\r\nimport chatbotReducer from '../features/chatbot/chatbotSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    chatbot: chatbotReducer\r\n  }\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type AppThunk = ThunkDispatch<RootState, unknown, Action<string>>","import { createSlice, createAsyncThunk, PayloadAction, Slice } from '@reduxjs/toolkit';\r\nimport { fetchEventSource } from '@microsoft/fetch-event-source';\r\nimport { IChatbotState, Document, Message } from '../../types';\r\n\r\nconst initialState: IChatbotState = {\r\n  messages: [],\r\n  isLoading: false,\r\n  isError: false,\r\n  history: [],\r\n  error: null,\r\n  pendingSourceDocs: [],\r\n  pendingMessage: '',\r\n  apiEndpoint: null\r\n};\r\n\r\nexport const chatbotSlice: Slice<IChatbotState> = createSlice({\r\n  name: 'chatbot',\r\n  initialState,\r\n  reducers: {\r\n    addMessage: (state, action: PayloadAction<Message>) => {\r\n      return { ...state, messages: [...state.messages, action.payload] };\r\n    },\r\n    updateIncoming: (state, action: PayloadAction<{error?: string, pending?: string, sourceDocs?: Document[]}>) => {\r\n\r\n      const payload = action.payload;\r\n\r\n      const newState = { ...state };\r\n\r\n      if(payload.error) {\r\n        newState.error = payload.error;\r\n        newState.isError = true;\r\n      }\r\n\r\n      if(payload.pending) {\r\n        newState.pendingMessage = state.pendingMessage + action.payload.pending;\r\n      }\r\n\r\n      if(payload.sourceDocs) {\r\n        newState.pendingSourceDocs = payload.sourceDocs;\r\n      }\r\n\r\n      return newState;\r\n    },\r\n    clearIncoming: state => {\r\n      return { ...state, pendingMessage: '' };\r\n    },\r\n    finishIncoming: (state, action: PayloadAction<Message>) => {\r\n      \r\n      return {...state, ...{\r\n        history: [...state.history, [action.payload.message, state.pendingMessage ?? '', state.pendingSourceDocs as Document[]]],\r\n        messages: [\r\n          ...state.messages,\r\n          {\r\n            type: 'bot',\r\n            message: state.pendingMessage ?? '',\r\n            sourceDocs: state.pendingSourceDocs as Document[],\r\n          },\r\n        ],\r\n        pendingMessage: '',\r\n        pendingSourceDocs: [],\r\n        loading: false\r\n      }};\r\n\r\n    },\r\n    setError: (state, action: PayloadAction<string>) => {\r\n      return { ...state, isError: true, error: action.payload };\r\n    },\r\n    clearError: (state, action: PayloadAction<undefined>) => {\r\n      return { ...state, isError: false, error: null };\r\n    },\r\n    setLoading: (state, action: PayloadAction<boolean>) => {\r\n      return { ...state, isLoading: action.payload };\r\n    },\r\n    clearMessages: (state, action: PayloadAction<undefined>) => {\r\n      return { ...state, messages: [] };\r\n    },\r\n    setApiEndpoint: (state, action: PayloadAction<string>) => {\r\n      return { ...state, apiEndpoint: action.payload };\r\n    },\r\n  }\r\n});\r\n\r\nexport const { addMessage, updateIncoming, clearIncoming, setError, clearError, setLoading, clearMessages, setApiEndpoint, finishIncoming } = chatbotSlice.actions;\r\nexport default chatbotSlice.reducer;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport sendMessageThunk from '../features/chatbot/sendMessage';\r\nimport { AppDispatch, RootState } from '../reduxApp/store';\r\nimport { clearMessages as clearMessagesAction, setApiEndpoint } from '../features/chatbot/chatbotSlice';\r\n\r\nexport default function useChatBot () {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  \r\n  const messages = useSelector((state:RootState) => state.chatbot.messages);\r\n  const isLoading = useSelector((state:RootState) => state.chatbot.isLoading);\r\n  const isError = useSelector((state:RootState) => state.chatbot.isError);\r\n  const error = useSelector((state:RootState) => state.chatbot.error);\r\n  \r\n  const sendMessage = (question: string) => dispatch(sendMessageThunk(question));\r\n  const clearMessages = () => dispatch(clearMessagesAction(undefined));\r\n  const setEndpoint = (endpoint: string) => dispatch(setApiEndpoint(endpoint));\r\n\r\n  return {\r\n    messages,\r\n    isLoading,\r\n    isError,\r\n    error,\r\n    setEndpoint,\r\n    clearMessages,\r\n    sendMessage\r\n  };\r\n};","import { fetchEventSource } from \"@microsoft/fetch-event-source\";\r\nimport { setError, updateIncoming, finishIncoming, clearError, addMessage } from \"./chatbotSlice\";\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"../../reduxApp/store\";\r\n\r\nexport const sendMessage = createAsyncThunk('chatbot/sendMessage', async (question: string,  { getState, dispatch }) => {\r\n  const { apiEndpoint, history } = (getState() as RootState).chatbot;\r\n\r\n  const apiPath = apiEndpoint + '/chat';\r\n\r\n  try {\r\n\r\n    dispatch(clearError(undefined));\r\n    dispatch(addMessage({\r\n      message: question,\r\n      type:'user'\r\n    }))\r\n    fetchEventSource(apiPath, {\r\n      method: 'POST',\r\n      credentials: 'include',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n        'mode': 'cors',\r\n      },\r\n      body: JSON.stringify({\r\n        question,\r\n        history\r\n      }),\r\n      onmessage: (event: any) => {\r\n\r\n        if(event.data === '[DONE]') {\r\n          return;\r\n        }\r\n\r\n        const data = JSON.parse(event.data);\r\n          \r\n        dispatch(updateIncoming(data));\r\n      },\r\n      onclose: () => {\r\n        dispatch(finishIncoming({message: question, type: 'user'}));\r\n      },\r\n      onerror(err: any) {\r\n        dispatch(setError(err.message));\r\n        throw err; // rethrow to stop the operation\r\n      }\r\n    });\r\n  } catch (error: any) {\r\n    dispatch(setError(error.message));\r\n  }\r\n});\r\n\r\nexport default sendMessage;","import { RootState } from '../reduxApp/store';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport default function usePending() {\r\n  const pending = useSelector((state: RootState) => state.chatbot.pendingMessage);\r\n  \r\n  return { pending };\r\n}"],"names":[],"version":3,"file":"module.js.map"}